name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  # Uncomment to enable manual releases
  # release:
  #   types: [created]

jobs:
  # Step 1: Run Rust tests
  test-rust:
    name: Run Rust Tests
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Visual C++ Redistributable
        run: choco install vcredist140 -y

      - name: Verify MSVC runtime DLLs installed
        run: dir "C:\Windows\System32\msvcp*.dll"

      - name: Add libvosk.dll to PATH
        run: echo "$env:GITHUB_WORKSPACE\src-tauri\lib" | Out-File -Append -Encoding utf8 $env:GITHUB_PATH

      - name: Verify libvosk.dll exists
        run: |
          if (Test-Path "src-tauri\lib\libvosk.dll") {
            Write-Host "✓ libvosk.dll found"
            Get-Item "src-tauri\lib\libvosk.dll" | Select-Object Name, Length
          } else {
            Write-Error "✗ libvosk.dll NOT found"
            exit 1
          }

      - name: Install Vulkan SDK
        uses: jakoch/install-vulkan-sdk-action@v1
        with:
          vulkan_version: 1.3.290.0
          install_runtime: true
          cache: true
          stripdown: true

      - name: Verify Vulkan SDK installation
        run: |
          if (Test-Path $env:VULKAN_SDK) {
            Write-Host "✓ VULKAN_SDK environment variable set to: $env:VULKAN_SDK"
            Get-ChildItem $env:VULKAN_SDK | Select-Object Name
          } else {
            Write-Error "✗ VULKAN_SDK not set or path doesn't exist"
            exit 1
          }

      - name: Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Create CMake toolchain file for nested builds
        run: |
          $clPath = (Get-Command cl.exe).Source -replace '\\', '/'
          $toolchainPath = "$env:TEMP\windows-toolchain.cmake"

          @"
          set(CMAKE_C_COMPILER "$clPath" CACHE FILEPATH "C compiler" FORCE)
          set(CMAKE_CXX_COMPILER "$clPath" CACHE FILEPATH "C++ compiler" FORCE)
          set(CMAKE_SYSTEM_NAME Windows)
          "@ | Out-File -FilePath $toolchainPath -Encoding utf8

          echo "CMAKE_TOOLCHAIN_FILE=$toolchainPath" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
          Write-Host "✓ Created CMake toolchain file at $toolchainPath"
          Get-Content $toolchainPath

      - name: Run Rust tests
        run: |
          cd src-tauri
          $env:RUST_BACKTRACE = "1"
          $env:RUST_LOG = "debug"
          cargo test --verbose 2>&1 | Tee-Object -FilePath "../build.log"
        continue-on-error: true

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log
          retention-days: 1

  # Step 2: Build the app
  # build:
  #   name: Build Tauri App
  #   needs: test-rust
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest, ubuntu-latest, macos-latest]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Setup Bun
  #       uses: oven-sh/setup-bun@v1
  #       with:
  #         bun-version: latest

  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: Install dependencies (Ubuntu)
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

  #     - name: Cache Rust dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           src-tauri/target
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-

  #     - name: Install frontend dependencies
  #       run: bun install

  #     - name: Build Tauri app
  #       run: bun run tauri:build

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-app-${{ matrix.os }}
  #         path: |
  #           src-tauri/target/release/bundle/
  #         retention-days: 7

  # Step 3: Create release (COMMENTED - uncomment when ready)
  # release:
  #   name: Create Release
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release'
  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #
  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: |
  #           tauri-app-windows-latest/**/*
  #           tauri-app-ubuntu-latest/**/*
  #           tauri-app-macos-latest/**/*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
